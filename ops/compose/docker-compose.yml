x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  postgres:
    image: postgres:15
    container_name: youworker-postgres
    restart: unless-stopped
    env_file:
      - ../../.env
    ports:
      - "5432:5432"
    volumes:
      - ../../data/postgres:/var/lib/postgresql/data
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-youworker}"]

  qdrant:
    image: qdrant/qdrant:v1.8.2
    container_name: youworker-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ../../data/qdrant:/qdrant/storage
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "test -f /qdrant/storage/raft_state.json || exit 1"]
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334

  ollama:
    image: ollama/ollama:latest
    container_name: youworker-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ../../data/ollama:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: "*"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "ollama list || exit 1"]
      start_period: 120s

  mcp_web:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.mcp_web
      cache_from:
        - mcp_web:latest
    container_name: youworker-mcp-web
    command: ["uvicorn", "apps.mcp_servers.web.server:app", "--host", "0.0.0.0", "--port", "7001"]
    restart: unless-stopped
    ports:
      - "7001:7001"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:7001/health || exit 1"]
    environment:
      PYTHONUNBUFFERED: "1"

  mcp_semantic:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.mcp_semantic
      cache_from:
        - mcp_semantic:latest
    container_name: youworker-mcp-semantic
    command: ["uvicorn", "apps.mcp_servers.semantic.server:app", "--host", "0.0.0.0", "--port", "7002"]
    restart: unless-stopped
    ports:
      - "7002:7002"
    depends_on:
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:7002/health || exit 1"]
    environment:
      PYTHONUNBUFFERED: "1"
      OLLAMA_BASE_URL: "http://ollama:11434"
      QDRANT_URL: "http://qdrant:6333"

  mcp_datetime:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.mcp_datetime
      cache_from:
        - mcp_datetime:latest
    container_name: youworker-mcp-datetime
    command: ["uvicorn", "apps.mcp_servers.datetime.server:app", "--host", "0.0.0.0", "--port", "7003"]
    restart: unless-stopped
    ports:
      - "7003:7003"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:7003/health || exit 1"]
    environment:
      PYTHONUNBUFFERED: "1"

  mcp_ingest:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.mcp_ingest
      cache_from:
        - mcp_ingest:latest
    container_name: youworker-mcp-ingest
    command: ["uvicorn", "apps.mcp_servers.ingest.server:app", "--host", "0.0.0.0", "--port", "7004"]
    restart: unless-stopped
    env_file:
      - ../../.env
    ports:
      - "7004:7004"
    depends_on:
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:7004/health || exit 1"]
      start_period: 120s
    environment:
      PYTHONUNBUFFERED: "1"
      OLLAMA_BASE_URL: "http://ollama:11434"
      QDRANT_URL: "http://qdrant:6333"
    volumes:
      - ../../data/uploads:/data/uploads
      - ../../examples/ingestion:/data/examples:ro

  mcp_units:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.mcp_units
      cache_from:
        - mcp_units:latest
    container_name: youworker-mcp-units
    command: ["uvicorn", "apps.mcp_servers.units.server:app", "--host", "0.0.0.0", "--port", "7005"]
    restart: unless-stopped
    ports:
      - "7005:7005"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:7005/health || exit 1"]
    environment:
      PYTHONUNBUFFERED: "1"
      OLLAMA_BASE_URL: "http://ollama:11434"
      QDRANT_URL: "http://qdrant:6333"

  api:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.api
      args:
        ENABLE_GPU_TORCH: ${ENABLE_GPU_TORCH:-0}
      cache_from:
        - api:latest
    container_name: youworker-api
    env_file:
      - ../../.env
    environment:
      PYTHONUNBUFFERED: "1"
      OLLAMA_BASE_URL: "http://ollama:11434"
      QDRANT_URL: "http://qdrant:6333"
      ROOT_API_KEY: "secure-dev-root-key-2025-v1"
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - ../../examples/ingestion:/data/examples:ro
      - ../../data/uploads:/data/uploads
      - ../../data/models:/app/models:ro
    depends_on:
      ollama:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mcp_web:
        condition: service_healthy
      mcp_semantic:
        condition: service_healthy
      mcp_datetime:
        condition: service_healthy
      mcp_ingest:
        condition: service_started
      mcp_units:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s

  frontend:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.frontend
      args:
        NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-}
        NEXT_PUBLIC_API_PORT: ${NEXT_PUBLIC_API_PORT:-8000}
        NEXT_PUBLIC_API_KEY: ${NEXT_PUBLIC_API_KEY:-dev-root-key}
      cache_from:
        - frontend:latest
    container_name: youworker-frontend
    env_file:
      - ../../.env
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
    environment:
      NODE_ENV: "production"

  grafana:
    image: grafana/grafana:10.4.3
    container_name: youworker-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - ../../data/grafana:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3001}
      GF_INSTALL_PLUGINS: ""
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: youworker-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../../data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]

  nginx:
    image: nginx:1.25.5-alpine
    container_name: youworker-nginx
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../data/nginx/ssl:/etc/nginx/ssl
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider --no-check-certificate https://127.0.0.1:8000/ || exit 1"]

networks:
  default:
    name: youworker-network
    driver: bridge
