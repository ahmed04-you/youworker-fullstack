x-ollama-gpu-deploy: &ollama-gpu-deploy
  resources:
    reservations:
      devices:
        - driver: nvidia
          count: all
          capabilities: [gpu]

x-ollama-gpu-env: &ollama-gpu-env
  NVIDIA_VISIBLE_DEVICES: "all"
  NVIDIA_DRIVER_CAPABILITIES: "compute,utility"

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    env_file:
      - ../../.env
    ports:
      - "5432:5432"
    volumes:
      - ../../data/postgres:/var/lib/postgresql/data
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-youworker}"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-youworker}

  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"  # Porta per l'API REST di Qdrant
    volumes:
      - ../../data/qdrant:/qdrant/storage
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334

  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    ports:
      - "11434:11434"
    deploy: *ollama-gpu-deploy
    volumes:
      - ../../data/ollama:/root/.ollama
    environment:
      <<: *ollama-gpu-env
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: "*"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "ollama list || exit 1"]
      start_period: 120s  # Ollama può richiedere più tempo per avviarsi

  mcp_web:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.mcp_web
    command: ["uvicorn", "apps.mcp_servers.web.server:app", "--host", "0.0.0.0", "--port", "7001"]
    restart: unless-stopped
    ports:
      - "7001:7001"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:7001/health || exit 1"]
    environment:
      PYTHONUNBUFFERED: "1"

  mcp_semantic:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.mcp_semantic
    command: ["uvicorn", "apps.mcp_servers.semantic.server:app", "--host", "0.0.0.0", "--port", "7002"]
    restart: unless-stopped
    ports:
      - "7002:7002"
    depends_on:
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:7002/health || exit 1"]
    environment:
      PYTHONUNBUFFERED: "1"

  mcp_datetime:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.mcp_datetime
    command: ["uvicorn", "apps.mcp_servers.datetime.server:app", "--host", "0.0.0.0", "--port", "7003"]
    restart: unless-stopped
    ports:
      - "7003:7003"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:7003/health || exit 1"]
    environment:
      PYTHONUNBUFFERED: "1"

  mcp_ingest:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.mcp_ingest
    command: ["uvicorn", "apps.mcp_servers.ingest.server:app", "--host", "0.0.0.0", "--port", "7004"]
    restart: unless-stopped
    env_file:
      - ../../.env
    ports:
      - "7004:7004"
    depends_on:
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:7004/health || exit 1"]
    environment:
      PYTHONUNBUFFERED: "1"
    volumes:
      - ../../data/uploads:/data/uploads
      - ../../examples/ingestion:/data/examples:ro

  mcp_units:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.mcp_units
    command: ["uvicorn", "apps.mcp_servers.units.server:app", "--host", "0.0.0.0", "--port", "7005"]
    restart: unless-stopped
    ports:
      - "7005:7005"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:7005/health || exit 1"]
    environment:
      PYTHONUNBUFFERED: "1"

  api:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.api
      args:
        ENABLE_GPU_TORCH: ${ENABLE_GPU_TORCH:-0}
    env_file:
      - ../../.env
    environment:
      <<: *ollama-gpu-env
      PYTHONUNBUFFERED: "1"
    restart: unless-stopped
    deploy: *ollama-gpu-deploy
    gpus: "all"
    ports:
      - "8001:8001"
    volumes:
      - ../../examples/ingestion:/data/examples:ro
      - ../../data/uploads:/data/uploads
      - ../../data/models:/app/models:ro
    depends_on:
      ollama:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mcp_web:
        condition: service_healthy
      mcp_semantic:
        condition: service_healthy
      mcp_datetime:
        condition: service_healthy
      mcp_ingest:
        condition: service_healthy
      mcp_units:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]

  frontend:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile.frontend
      args:
        NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-}
        NEXT_PUBLIC_API_PORT: ${NEXT_PUBLIC_API_PORT:-8000}
        NEXT_PUBLIC_API_KEY: ${NEXT_PUBLIC_API_KEY:-dev-root-key}
    env_file:
      - ../../.env
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
    environment:
      NODE_ENV: "production"

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../data/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
    # Rimuoviamo la generazione automatica dei certificati dal container
    # e usiamo lo script esterno per maggiore controllo

networks:
  default:
    name: youworker-network
    driver: bridge

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  ollama_data:
    driver: local
  nginx_ssl:
    driver: local
