# YouWorker.AI Environment Configuration Example
# Copy this file to .env and fill in your values
# IMPORTANT: Never commit .env to git! It contains secrets.
# Generated: 2025-10-27

# ============================================================================
# Ollama Configuration
# ============================================================================
OLLAMA_BASE_URL=http://ollama:11434
CHAT_MODEL=gpt-oss:20b
EMBED_MODEL=embeddinggemma:300m

# ============================================================================
# Qdrant Vector Store Configuration
# ============================================================================
QDRANT_URL=http://qdrant:6333
QDRANT_COLLECTION=documents
EMBEDDING_DIM=768

# ============================================================================
# MCP Server URLs (comma-separated)
# ============================================================================
MCP_SERVER_URLS=http://mcp_web:7001,http://mcp_semantic:7002,http://mcp_datetime:7003,http://mcp_ingest:7004,http://mcp_units:7005
MCP_REFRESH_INTERVAL=300

# ============================================================================
# API Configuration
# ============================================================================
APP_ENV=production
API_HOST=0.0.0.0
API_PORT=8001
LOG_LEVEL=INFO

# CORS Origins (comma-separated, must be full URLs with scheme)
# Replace with your actual frontend URLs
FRONTEND_ORIGIN=https://your-domain:8000,https://localhost:8000

# Security: Whitelist client IPs for on-premise access (comma-separated)
# Replace with your actual client IP addresses
WHITELISTED_IPS=127.0.0.1,YOUR_CLIENT_IP_HERE

# ============================================================================
# SECURITY: API Keys and Secrets
# ============================================================================
# CRITICAL: Generate strong, unique secrets before deployment!
# Use: openssl rand -hex 32
#
# ROOT_API_KEY: Master API key for backend access
# Generate with: openssl rand -hex 32
ROOT_API_KEY=REPLACE_WITH_GENERATED_KEY

# JWT_SECRET: Secret for JWT token signing (should be different from ROOT_API_KEY)
# Generate with: openssl rand -hex 32
JWT_SECRET=REPLACE_WITH_GENERATED_KEY

# CSRF_SECRET: Secret for signing CSRF tokens (should be different from JWT secret)
# Generate with: openssl rand -hex 32
CSRF_SECRET=REPLACE_WITH_GENERATED_KEY

# CHAT_MESSAGE_ENCRYPTION_SECRET: MANDATORY - Fernet key for encrypting chat messages
# CRITICAL: This is REQUIRED. Application will not start without it.
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
CHAT_MESSAGE_ENCRYPTION_SECRET=REPLACE_WITH_GENERATED_FERNET_KEY

# BACKUP_ENCRYPTION_KEY: REQUIRED for encrypted backups
# Generate with: openssl rand -base64 32
BACKUP_ENCRYPTION_KEY=REPLACE_WITH_GENERATED_KEY

# AUTHENTIK SSO
# Enable Authentik integration and define the header that carries the API key.
# The header name should be lowercase and match the value configured in Authentik.
AUTHENTIK_ENABLED=true
AUTHENTIK_HEADER_NAME=x-authentik-api-key
# Optional: forward Authentik username to display in the UI (e.g. x-authentik-username)
AUTHENTIK_FORWARD_USER_HEADER=x-authentik-username

# ============================================================================
# Database Configuration
# ============================================================================
POSTGRES_USER=youworker
# Generate with: openssl rand -hex 32
POSTGRES_PASSWORD=REPLACE_WITH_GENERATED_PASSWORD
POSTGRES_DB=youworker
DATABASE_URL=postgresql+asyncpg://youworker:REPLACE_WITH_GENERATED_PASSWORD@postgres:5432/youworker

# ============================================================================
# Ingestion Configuration
# ============================================================================
INGEST_UPLOAD_ROOT=/data/uploads
INGEST_ACCELERATOR=auto
INGEST_GPU_DEVICE=cuda

# ============================================================================
# Agent Configuration
# ============================================================================
# Maximum tool call iterations before stopping agent loop (prevents infinite loops)
# Range: 1-50, Default: 10
MAX_AGENT_ITERATIONS=50

# ============================================================================
# Retry Configuration
# ============================================================================
# Exponential backoff retry settings for external service calls (Ollama, Qdrant, MCP)
# Maximum retry attempts (Range: 1-10, Default: 3)
RETRY_MAX_ATTEMPTS=3
# Minimum wait time between retries in seconds (Range: 0.1-60.0, Default: 1.0)
RETRY_MIN_WAIT=1.0
# Maximum wait time between retries in seconds (Range: 0.5-300.0, Default: 10.0)
RETRY_MAX_WAIT=10.0
# Exponential backoff multiplier (Range: 1.0-5.0, Default: 2.0)
RETRY_MULTIPLIER=2.0

# ============================================================================
# STT (Speech-to-Text) Configuration
# ============================================================================
STT_MODEL=small
STT_DEVICE=cuda
STT_COMPUTE_TYPE=float16
STT_BEAM_SIZE=1
STT_LANGUAGE=it

# ============================================================================
# TTS (Text-to-Speech) Configuration
# ============================================================================
TTS_PROVIDER=piper
TTS_VOICE=it_IT-paola-medium
TTS_MODEL_DIR=/app/models/tts

# ============================================================================
# Frontend Configuration
# ============================================================================
# NOTE: NEXT_PUBLIC_* variables are exposed to the browser
# DO NOT put secrets in NEXT_PUBLIC_* variables!
# Replace with your actual domain/IP
NEXT_PUBLIC_API_BASE_URL=https://your-domain:8000
NEXT_PUBLIC_API_PORT=8000
NEXT_INTERNAL_API_BASE_URL=http://api:8001

# ============================================================================
# GPU Configuration
# ============================================================================
ENABLE_GPU_TORCH=1

# ============================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ============================================================================
# Before deploying to production:
# 1. [ ] Generate all secrets using: openssl rand -hex 32
# 2. [ ] Generate CHAT_MESSAGE_ENCRYPTION_SECRET (MANDATORY - see above for command)
# 3. [ ] Update WHITELISTED_IPS with your client IPs
# 4. [ ] Update FRONTEND_ORIGIN with your domain
# 5. [ ] Update NEXT_PUBLIC_API_BASE_URL with your domain
# 6. [ ] Set APP_ENV=production
# 7. [ ] Verify DATABASE_URL password matches POSTGRES_PASSWORD
# 8. [ ] Review and update firewall rules
# 9. [ ] Set up SSL certificates (see scripts/generate-ssl-cert.sh)
# 10. [ ] Configure automated backups (see ops/scripts/backup-database.sh)
# 11. [ ] Test authentication and IP whitelisting
# 12. [ ] Verify encryption is working (check startup logs for validation message)
